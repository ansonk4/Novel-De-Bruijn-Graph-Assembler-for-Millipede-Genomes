from de_bruijn import *
import graphviz
import time

def read_fasta(file_name: str):
    reads = []
    with open(file_name, encoding='utf-8') as file:
        i = 0
        seq = ""
        for line in file.readlines():
            if not line.startswith('+') and not line.startswith('@') and not line.startswith('#') and not line.startswith('>'):
                seq += line[:-1]
            else:
                reads.append(seq)
                i += 1
                seq = ""
                if i > 1000:
                    break
    
    reads.pop(0)

    return reads

def visualize_debruijn(Veritces, Edges):
    dot = graphviz.Digraph(comment='DBG', engine='sfdp', node_attr={'color': 'lightblue2', 'style': 'filled', 'width':'0.5', 'shape':'point'})
    dot.attr(overlap='false', beautify='true', bgcolor='black')
    dot.edge_attr.update(arrowsize='1.5', color='white')
    for vertice in Veritces:
        dot.node(vertice, '')
    for vertice, neighbours in Edges.items():
        for neighbour in neighbours:
            dot.edge(vertice, neighbour.label)

    dot.render(directory='doctest-output', view=True)  
    return dot

def assembly(reads, k):
    """this function produces a list of assembly results 
        from a set of given sequencing reads

    Args:
        reads (List(String)): a list of strings of sequencing reads
        k (int): the string size for the de bruijn graph nodes

    Returns:
        final_contigs: a dictionary mapping the actual contigs 
        and their corresponding reads
    """
    start_time = time.time()
    vertices, edges = construct_graph(reads, k=k)
    contigs = output_contigs(vertices, edges)
    final_contigs = find_contigs(contigs, reads)
    
    print(f'Time Taken: {time.time() - start_time}s')
    return final_contigs, vertices, edges


reads = read_fasta("T_c_100k.fasta")

# SczTNLB_3789 = "AGGATCTTCAGACGGCCATTTTGTAGCAGTAGTATAATGCTGGAGCAGCTTAGGTTGAGAAGTTGGTCTAGATCTATAGATTTCAGATTTAGGATCTTCAGATGGCCTTTTTGTAGCGGTAGTATCATGCTGGAGCAGCTTAGGTTGAGAAGTTGGTCGAGATCTATAGATTTCAGATTTAGGATAAACAGAAGGCTATTTTGTAGCAGTAGTATCATGCCGGAGGGAAATTGGTTGAGAAATTTGTCTAGATCTATAGATTTCCGATTTAGGATCTTCAGACGGCCATTTTGTAGCAGTAGTATCATGCTGGAGGGAAATAGGTTGAGAAATTTGTCTAGATCTATAGATTTCAGATTTAGGATCATCAGAAGGCCATTTTGTAGCAGTAGTATCATGCTAAAAGCCCTTAGGTTGGAAAATTTGTCTAGATCAATAGATTTCAGATTTAGGATCTTCAGACGGCCATTTTGTAGCAGTAGTACCATGCTAAAAGGCCTTAGGTTGAAAAATTTGTCTAAATCAATAGATTTCAGATTTAGGATATTCAGACAGCCATTTTGTAGTAGTAGTATCATGCAGAAAGGAAACAGGTTGAGAAATTTGTCTAGATCTATAGATTTCAGCTTTAGGATCTACAGACGGCCATTTTGAAGCAGTAGTATCATGCTGGAGAGCCTTAAGTTGAGAAATTGGTCTAGATTTCTAGATTTCAGATTTAGGATCATCAGAAGGCCATTTTGTAGCAGTAGTATCATGCTAAAAGCCCTTAGGTTTAAAAATCTGTCTAAATCTATAGATTTTACATTTAAGAGCTTCAGACAGCTATTTTGTAGCAGTAGTATCATGCTGGAGGGAAATAGNNNNNNNNNNAGGATCTTCAGACGGCCATTTTGTAGCAGTAGTATAATGCTGGAGCAGCTTAGGTTGAGAAGTTGGTCTAGATCTATAGATTTCAGATTTAGGATCTTCAGATGGCCTTTTTGTAGCGGTAGTATCATGCTGGAGCAGCTTAGGTTGAGAAGTTGGTCGAGATCTATAGATTTCAGATTTAGGATAAACAGAAGGCTATTTTGTAGCAGTAGTATCATGCCGGAGGGAAATTGGTTGAGAAATTTGTCTAGATCTATAGATTTCCGATTTAGGATCTTCAGACGGCCATTTTGTAGCAGTAGTATCATGCTGGAGGGAAATAGGTTGAGAAATTTGTCTAGATCTATAGATTTCAGATTTAGGATCATCAGAAGGCCATTTTGTAGCAGTAGTATCATGCTAAAAGCCCTTAGGTTGGAAAATTTGTCTAGATCAATAGATTTCAGATTTAGGATCTTCAGACGGCCATTTTGTAGCAGTAGTACCATGCTAAAAGGCCTTAGGTTGAAAAATTTGTCTAAATCAATAGATTTCAGATTTAGGATATTCAGACAGCCATTTTGTAGTAGTAGTATCATGCAGAAAGGAAACAGGTTGAGAAATTTGTCTAGATCTATAGATTTCAGCTTTAGGATCTACAGACGGCCATTTTGAAGCAGTAGTATCATGCTGGAGAGCCTTAAGTTGAGAAATTGGTCTAGATTTCTAGATTTCAGATTTAGGATCATCAGAAGGCCATTTTGTAGCAGTAGTATCATGCTAAAAGCCCTTAGGTTTAAAAATCTGTCTAAATCTATAGATTTTACATTTAAGAGCTTCAGACAGCTATTTTGTAGCAGTAGTATCATGCTGGAGGGAAATAG"
# SczTNLB_2600 = "TGTAGCAGTAGTATCATGCTGGAGGGAAATAGTTTGAGAAATTGGTCTAGATCTATAGATTTCAGATTTAGGATCTTTAGACGGCCATTCTGTAGCAGTAGTATCATGCTGGAGGGTCTTAGGTTGAAAAATTAGTCTAGATCAATAAATTTTACTTTTAGGATCAACAGAAGGCCATTTTGTAGCAGTAGTATCATCCTTAAGGGCCTTAGGTTGAGAAATTGGTCTAGATCTATAGATTTTACATTTAGGAGCTTCAGACGGCCATTTTGTAGCAGTAGTATCATGCTGGAGAGAAATAGTTTGAGAAATTTGTCTAGATCTATAGATTTCAAATTTAGGATCTTCAGATGGCCATTCTGTAGCAGTAGTATCATCCTTAAGGGCCTTAGGTTGAGAATTTGGTCTAGATCTATAAATTTCACATTTAGGAGCTTCAGACGCCATTTTGTAGCAGTCGTATCATGCTGGAGGGAAATAGGTTGAGAATTTGGTCTAGATTTCTAGATTTCAGGTTTTGGAGCTTCAGAAGGCTATTTTGTAACCGTAGTATCATGCTTGAGGGCCTTAGGTTGACAAATTGGTCTAGATCTTTAGATTTTACAGTTAGGAGCTTCAGATGGCCATTTTGTAGCAGTAGTATCATGCTGGAGAGAAATAGTTTGAGAAATTTGTCTAGATCTATAGATTTCAAATTTAGGATCTTCAGATGGCCATTCTGTAGCAGTAGTATCATGCTGGAAGGCTTTAGTTTGTGAAAATGGTCTAGATCAATAAATTTCAGATTTAGGATCAACAGAAGGCCATTTTGTAGCAGTAGTATCATGCTTAAGAGCTTAGGTTGAGAAATTGGTCTAGATATATAGACTTTACATTTAGGAGCTTCTAACGGCCAATTTGTAGCAGTAGTATCATGTTGGAGGGGAATAGTTTGAAAAATTCGTCTAGATCTATAGATTTCAGATTTAGGATCTTCAGACGGCCATTCTGTAGCAGTAGTATCATGCTGGAGGGCTTTAGTTTGAGAAATTGGTCTAGATCAATAAATTTCAGATTTAGGATCAAC"
# ori          = "AGGATCTTCAGACGGCCATTTTGTAGCAGTAGTATAATGCTGGAGCAGCTTAGGTTGAGAAGTTGGTCTAGATCTATAGATTTCAGATTTAGGATCTTCAGATGGCCTTTTTGTAGCGGTAGTATCATGCTGGAGCAGCTTAGGTTGAGAAGTTGGTCGAGATCTATAGATTTCAGATTTAGGATAAACAGAAGGCTATTTTGTAGCAGTAGTATCATGCCGGAGGGAAATTGGTTGAGAAATTTGTCTAGATCTATAGATTTCCGATTTAGGATCTTCAGACGGCCATTTTGTAGCAGTAGTATCATGCTGGAGGGAAATAGGTTGAGAAATTTGTCTAGATCTATAGATTTCAGATTTAGGATCATCAGAAGGCCATTTTGTAGCAGTAGTATCATGCTAAAAGCCCTTAGGTTGGAAAATTTGTCTAGATCAATAGATTTCAGATTTAGGATCTTCAGACGGCCATTTTGTAGCAGTAGTACCATGCTAAAAGGCCTTAGGTTGAAAAATTTGTCTAAATCAATAGATTTCAGATTTAGGATATTCAGACAGCCATTTTGTAGTAGTAGTATCATGCAGAAAGGAAACAGGTTGAGAAATTTGTCTAGATCTATAGATTTCAGCTTTAGGATCTACAGACGGCCATTTTGAAGCAGTAGTATCATGCTGGAGAGCCTTAAGTTGAGAAATTGGTCTAGATTTCTAGATTTCAGATTTAGGATCATCAGAAGGCCATTTTGTAGCAGTAGTATCATGCTAAAAGCCCTTAGGTTTAAAAATCTGTCTAAATCTATAGATTTTACATTTAAGAGCTTCAGACAGCTATTTTGTAGCAGTAGTATCATGCTGGAGGGAAATAGNNNNNNNNNNAGGATCTTCAGACGGCCATTTTGTAGCAGTAGTATAATGCTGGAGCAGCTTAGGTTGAGAAGTTGGTCTAGATCTATAGATTTCAGATTTAGGATCTTCAGATGGCCTTTTTGTAGCGGTAGTATCATGCTGGAGCAGCTTAGGTTGAGAAGTTGGTCGAGATCTATAGATTTCAGATTTAGGATAAACAGAAGGCTATTTTGTAGCAGTAGTATCATGCCGGAGGGAAATTGGTTGAGAAATTTGTCTAGATCTATAGATTTCCGATTTAGGATCTTCAGACGGCCATTTTGTAGCAGTAGTATCATGCTGGAGGGAAATAGGTTGAGAAATTTGTCTAGATCTATAGATTTCAGATTTAGGATCATCAGAAGGCCATTTTGTAGCAGTAGTATCATGCTAAAAGCCCTTAGGTTGGAAAATTTGTCTAGATCAATAGATTTCAGATTTAGGATCTTCAGACGGCCATTTTGTAGCAGTAGTACCATGCTAAAAGGCCTTAGGTTGAAAAATTTGTCTAAATCAATAGATTTCAGATTTAGGATATTCAGACAGCCATTTTGTAGTAGTAGTATCATGCAGAAAGGAAACAGGTTGAGAAATTTGTCTAGATCTATAGATTTCAGCTTTAGGATCTACAGACGGCCATTTTGAAGCAGTAGTATCATGCTGGAGAGCCTTAAGTTGAGAAATTGGTCTAGATTTCTAGATTTCAGATTTAGGATCATCAGAAGGCCATTTTGTAGCAGTAGTATCATGCTAAAAGCCCTTAGGTTTAAAAATCTGTCTAAATCTATAGATTTTACATTTAAGAGCTTCAGACAGCTATTTTGTAGCAGTAGTATCATGCTGGAGGGAAATAGTTTGAGAAATTGGTCTAGATCTATAGATTTCAGATTTAGGATCTTTAGACGGCCATTCTGTAGCAGTAGTATCATGCTGGAGGGTCTTAGGTTGAAAAATTAGTCTAGATCAATAAATTTTACTTTTAGGATCAACAGAAGGCCATTTTGTAGCAGTAGTATCATCCTTAAGGGCCTTAGGTTGAGAAATTGGTCTAGATCTATAGATTTTACATTTAGGAGCTTCAGACGGCCATTTTGTAGCAGTAGTATCATGCTGGAGAGAAATAGTTTGAGAAATTTGTCTAGATCTATAGATTTCAAATTTAGGATCTTCAGATGGCCATTCTGTAGCAGTAGTATCATCCTTAAGGGCCTTAGGTTGAGAATTTGGTCTAGATCTATAAATTTCACATTTAGGAGCTTCAGACGCCATTTTGTAGCAGTCGTATCATGCTGGAGGGAAATAGGTTGAGAATTTGGTCTAGATTTCTAGATTTCAGGTTTTGGAGCTTCAGAAGGCTATTTTGTAACCGTAGTATCATGCTTGAGGGCCTTAGGTTGACAAATTGGTCTAGATCTTTAGATTTTACAGTTAGGAGCTTCAGATGGCCATTTTGTAGCAGTAGTATCATGCTGGAGAGAAATAGTTTGAGAAATTTGTCTAGATCTATAGATTTCAAATTTAGGATCTTCAGATGGCCATTCTGTAGCAGTAGTATCATGCTGGAAGGCTTTAGTTTGTGAAAATGGTCTAGATCAATAAATTTCAGATTTAGGATCAACAGAAGGCCATTTTGTAGCAGTAGTATCATGCTTAAGAGCTTAGGTTGAGAAATTGGTCTAGATATATAGACTTTACATTTAGGAGCTTCTAACGGCCAATTTGTAGCAGTAGTATCATGTTGGAGGGGAATAGTTTGAAAAATTCGTCTAGATCTATAGATTTCAGATTTAGGATCTTCAGACGGCCATTCTGTAGCAGTAGTATCATGCTGGAGGGCTTTAGTTTGAGAAATTGGTCTAGATCAATAAATTTCAGATTTAGGATCAAC"
# reads = [SczTNLB_3789, SczTNLB_2600]

reads = read_fasta('T_c_100k.fasta')
k = 25 
contigs, vertices, edges = assembly(reads, k=k)
# print(f'final contigs: {list(contigs.keys())[0]}')
print(list(contigs.keys())[0])

with open('1k_old.txt', 'w') as file:
    file.write(f'k = {k}\n')
    file.write(f'{len(list(contigs.keys())[0])}\n')
    file.write(list(contigs.keys())[0])

visualize_debruijn(vertices, edges)